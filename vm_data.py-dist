# All values below are left empty on purpose, for you to fill them with your VM references.
# The VM references will be passed over by jobs.py to pytest through pytest's --vm parameter.
# Consult README.md for accepted values.
# Example value: "http://somewhere/images/small_vm.xva"

# The "single" element contains 1 entry per VM filename:
# "small_vm": "alpine-minimal-3.12.0.xva",
# "small_vm_unix_tools": "centos7-64-created_8.0-zstd.xva",

# If a vm is meant to be used only on a given host version, the version can be specified
# through a tuple entry with (vm_filename, host_version) as:
# "small_vm": ("alpine-minimal-3.12.0.xva", r"8\.3\.")

# The host version specified for a vm is matched using re.match(), so valid patterns
# must be defined as raw strings: r"8\.2\.1", r"8\.[23]\.", or r"(9\.0|8\.2)".

# If host version is not specified, the vm filename will be used whatever the host version

# The "multi" element contains a list of VMs per entry
# "all": ["alpine-minimal-3.12.0.xva",
#         "alpine-uefi-minimal-efitools-3.12.0.xva",
#         ...],

# Same as "single", a vm can be bound to a given host version:
# "all": ["alpine-minimal-3.12.0.xva",
#         ("alpine-uefi-minimal-efitools-3.12.0.xva", r"8\.2\."),
#         ...],

VMS = {
    "single": {
        # basic small VM
        "small_vm": "",
        # small VM on which the guest tools are installable. Excludes alpine currently.
        "small_vm_unix_tools": "",
        # small UEFI VM on which efitools is installed, for some uefistored/varstored tests
        "small_vm_efitools": "",
        # "small" Windows Server VM (UEFI)
        "small_vm_windows": "",
        # Debian VM (UEFI, no GUI)
        "debian_uefi_vm": "",
    },
    "multi": {
        # all Unix VMs we want to run "multi_vms" tests on
        "all_unix": [],
        # all Windows VMs we want to run "multi_vms" tests on
        "all_windows": [],
        # VMs which support the installation of our unix guest tools from the ISO
        "tools_unix": [],
        # UEFI unix/linux Vms
        "uefi_unix": [],
        # UEFI Windows VMs
        "uefi_windows": [],
        # Testsign UEFI Windows VMs
        "tools_windows": [],
    }
}

# Example of use for a common XVA_LOCATION
#
# XVA_LOCATION="http://somewhere/"
#
# def prepend_xva_location(vm):
#     if type(vm) is tuple:
#         return (XVA_LOCATION + vm[0], vm[1])
#
#     return XVA_LOCATION + vm
#
# for key, vm in dict(VMS["single"]).items():
#     VMS["single"][key] = prepend_xva_location(vm)
#
# for key, vms in dict(VMS["multi"]).items():
#     VMS["multi"][key] = [prepend_xva_location(vm) for vm in vms]

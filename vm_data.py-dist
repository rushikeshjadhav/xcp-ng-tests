# All values below are left empty on purpose, for you to fill them with your VM references.
# The VM references will be passed over by jobs.py to pytest through pytest's --vm parameter.
# Consult README.md for accepted values.
# Example value: "http://somewhere/images/small_vm.xva"

# The "single" element contains 1 entry per VM filename:
# "small_vm": "alpine-minimal-3.12.0.xva",
# "small_vm_unix_tools": "centos7-64-created_8.0-zstd.xva",

# The "multi" element contains a list of VMs per entry
# "all": ["alpine-minimal-3.12.0.xva",
#         "alpine-uefi-minimal-efitools-3.12.0.xva",
#         ...],

VMS = {
    "single": {
        # basic small VM
        "small_vm": "",
        # small VM on which the guest tools are installable. Excludes alpine currently.
        "small_vm_unix_tools": "",
        # small UEFI VM on which efitools is installed, for some uefistored/varstored tests
        "small_vm_efitools": "",
        # "small" Windows VM (UEFI)
        "small_vm_windows": "",
        # Debian VM (UEFI, no GUI)
        "debian_uefi_vm": "",
    },
    "multi": {
        # all VMs we want to run "multi_vms" tests on
        "all": [],
        # VMs which support the installation of our unix guest tools from the ISO
        "tools_unix": [],
        # UEFI unix/linux Vms
        "uefi_unix": [],
        # UEFI Windows VMs
        "uefi_windows": [],
    }
}

# Example of use for a common XVA_LOCATION
#
# XVA_LOCATION="http://somewhere/"
#
# for key, vm in dict(VMS["single"]).items():
#     VMS["single"][key] = XVA_LOCATION + vm
#
# for key, vms in dict(VMS["multi"]).items():
#    VMS["multi"][key] = [XVA_LOCATION + vm for vm in vms]
